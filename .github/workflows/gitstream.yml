# Code generated by gitStream GitHub app - DO NOT EDIT

name: gitStream workflow automation
run-name: |
  /:\ gitStream: PR #${{ fromJSON(fromJSON(github.event.inputs.client_payload)).pullRequestNumber }} from ${{ github.event.inputs.full_repository }}. Cache: ${{ fromJSON(fromJSON(inputs.client_payload)).isNonCommitEvent }}. Run-id: ${{ fromJSON(fromJSON(inputs.client_payload)).artifactRunId }} 

on:
  workflow_dispatch:
    inputs:
      client_payload:
          description: The Client payload
          required: true
      full_repository:
          description: the repository name include the owner in `owner/repo_name` format
          required: true
      head_ref:
          description: the head sha
          required: true
      base_ref:
          description: the base ref 
          required: true
      installation_id:
          description: the installation id
          required: false
      resolver_url:
          description: the resolver url to pass results to
          required: true
      resolver_token:
          description: Optional resolver token for resolver service
          required: false
          default: ''
      debug_mode:
          description: Debug mode
          required: false
          default: true

jobs:
  gitStream:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    name: gitStream workflow automation
    env:
      SLACK_LINEAR_BEEHIVE_WEBHOOK: ${{ secrets.SLACK_LINEAR_BEEHIVE_WEBHOOK }}
      SLACK_TEAM_FLARE_WEBHOOK: ${{ secrets.SLACK_TEAM_FLARE_WEBHOOK }}
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      JIRA_URL: ${{ secrets.JIRA_URL }}
      JIRA_USER: ${{ secrets.JIRA_USER }}
      UI_GUILD_SLACK_WEBHOOK: ${{ secrets.UI_GUILD_SLACK_WEBHOOK }}
      LINEARB_METRICS_API_KEY: ${{ secrets.LINEARB_METRICS_API_KEY }}
      LINEARB_PUBLIC_API: ${{ secrets.LINEARB_PUBLIC_API }}
      OPEN_AI_TOKEN: ${{ secrets.OPEN_AI_TOKEN }}
      OPEN_AI_GITSTREAM_QA_TOKEN: ${{ secrets.OPEN_AI_GITSTREAM_QA_TOKEN }}
      OPEN_AI_GITSTREAM_REVIEWS_TOKEN: ${{ secrets.OPEN_AI_GITSTREAM_REVIEWS_TOKEN }}
      ELAD_WEBHOOK: ${{ secrets.ELAD_WEBHOOK }}
      ENABLE_DEBUG_ARTIFACTS: true
      ENABLE_CACHE: false
      TICKET_SUGGESTION_TOKEN: ${{ secrets.TICKET_SUGGESTION_TOKEN }}
    steps:
      - name: Adding PR Url
        run: |
          echo '[${{ fromJSON(fromJSON(inputs.client_payload)).repo }}#${{ fromJSON(fromJSON(inputs.client_payload)).prContext.number }}](${{ fromJSON(fromJSON(inputs.client_payload)).prContext.url }}) - `${{ fromJSON(fromJSON(inputs.client_payload)).branch }}` by ${{ fromJSON(fromJSON(inputs.client_payload)).prContext.author }}' >> $GITHUB_STEP_SUMMARY

      - name: Create variables file
        run: |
          echo "resolver_url=${{ github.event.inputs.resolver_url }}" >> variables.txt
          echo "resolver_token=${{ github.event.inputs.resolver_token }}" >> variables.txt

      - name: Upload variables file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: variables
          path: variables.txt

      - name: Evaluate Rules
        uses: linear-b/gitstream-github-action@LINBEE-18548-unify_events
        id: rules-engine
        with:
          full_repository: ${{ github.event.inputs.full_repository }}
          head_ref: ${{ github.event.inputs.head_ref }}
          base_ref: ${{ github.event.inputs.base_ref }}
          client_payload: ${{ github.event.inputs.client_payload }}
          installation_id: ${{ github.event.inputs.installation_id }}
          resolver_url: ${{ github.event.inputs.resolver_url }}
          resolver_token: ${{ github.event.inputs.resolver_token }}
